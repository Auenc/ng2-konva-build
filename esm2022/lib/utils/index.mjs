import updatePicture from './updatePicture';
import applyNodeProps from './applyNodeProps';
function camelize(str) {
    return str
        .replace(/^\w|[A-Z]|\b\w/g, function (letter, index) {
        return index == 0 ? letter.toLowerCase() : letter.toUpperCase();
    })
        .replace(/\s+/g, '');
}
function capitalizeFirstLetter(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
}
export function getName(componentTag) {
    return capitalizeFirstLetter(camelize(componentTag.slice(3).replace('-', ' ')));
}
export function createListener(instance) {
    const output = {};
    [
        'mouseover',
        'mousemove',
        'mouseout',
        'mouseenter',
        'mouseleave',
        'mousedown',
        'mouseup',
        'wheel',
        'contextmenu',
        'click',
        'dblclick',
        'touchstart',
        'touchmove',
        'touchend',
        'tap',
        'dbltap',
        'dragstart',
        'dragmove',
        'dragend',
    ].forEach((eventName) => {
        const name = eventName;
        const eventEmitter = (instance[name]);
        if (eventEmitter.observed) {
            output['on' + eventName] = eventEmitter.emit.bind(eventEmitter);
        }
    });
    return output;
}
export { updatePicture, applyNodeProps };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZzIta29udmEvc3JjL2xpYi91dGlscy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLGFBQWEsTUFBTSxpQkFBaUIsQ0FBQztBQUM1QyxPQUFPLGNBQWMsTUFBTSxrQkFBa0IsQ0FBQztBQUs5QyxTQUFTLFFBQVEsQ0FBQyxHQUFXO0lBQzNCLE9BQU8sR0FBRztTQUNQLE9BQU8sQ0FBQyxpQkFBaUIsRUFBRSxVQUFVLE1BQU0sRUFBRSxLQUFLO1FBQ2pELE9BQU8sS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDbEUsQ0FBQyxDQUFDO1NBQ0QsT0FBTyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQztBQUN6QixDQUFDO0FBRUQsU0FBUyxxQkFBcUIsQ0FBQyxNQUFjO0lBQzNDLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzFELENBQUM7QUFFRCxNQUFNLFVBQVUsT0FBTyxDQUFDLFlBQW9CO0lBQzFDLE9BQU8scUJBQXFCLENBQzFCLFFBQVEsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FDbEQsQ0FBQztBQUNKLENBQUM7QUFFRCxNQUFNLFVBQVUsY0FBYyxDQUFDLFFBQXdCO0lBQ3JELE1BQU0sTUFBTSxHQUFtQixFQUFFLENBQUM7SUFDbEM7UUFDRSxXQUFXO1FBQ1gsV0FBVztRQUNYLFVBQVU7UUFDVixZQUFZO1FBQ1osWUFBWTtRQUNaLFdBQVc7UUFDWCxTQUFTO1FBQ1QsT0FBTztRQUNQLGFBQWE7UUFDYixPQUFPO1FBQ1AsVUFBVTtRQUNWLFlBQVk7UUFDWixXQUFXO1FBQ1gsVUFBVTtRQUNWLEtBQUs7UUFDTCxRQUFRO1FBQ1IsV0FBVztRQUNYLFVBQVU7UUFDVixTQUFTO0tBQ1YsQ0FBQyxPQUFPLENBQUMsQ0FBQyxTQUFTLEVBQUUsRUFBRTtRQUN0QixNQUFNLElBQUksR0FBK0MsU0FBUyxDQUFDO1FBRW5FLE1BQU0sWUFBWSxHQUFpRCxDQUNqRSxRQUFRLENBQUMsSUFBSSxDQUFDLENBQ2YsQ0FBQztRQUNGLElBQUksWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQzFCLE1BQU0sQ0FBQyxJQUFJLEdBQUcsU0FBUyxDQUFDLEdBQUcsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDbEUsQ0FBQztJQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0gsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQztBQUVELE9BQU8sRUFBRSxhQUFhLEVBQUUsY0FBYyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdXBkYXRlUGljdHVyZSBmcm9tICcuL3VwZGF0ZVBpY3R1cmUnO1xuaW1wb3J0IGFwcGx5Tm9kZVByb3BzIGZyb20gJy4vYXBwbHlOb2RlUHJvcHMnO1xuaW1wb3J0IHsgS29udmFDb21wb25lbnQgfSBmcm9tICcuLi9pbnRlcmZhY2VzL2tvLWNvbXBvbmVudC5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBMaXN0ZW5lclJlY29yZCB9IGZyb20gJy4vdHlwZXMnO1xuXG5mdW5jdGlvbiBjYW1lbGl6ZShzdHI6IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiBzdHJcbiAgICAucmVwbGFjZSgvXlxcd3xbQS1aXXxcXGJcXHcvZywgZnVuY3Rpb24gKGxldHRlciwgaW5kZXgpIHtcbiAgICAgIHJldHVybiBpbmRleCA9PSAwID8gbGV0dGVyLnRvTG93ZXJDYXNlKCkgOiBsZXR0ZXIudG9VcHBlckNhc2UoKTtcbiAgICB9KVxuICAgIC5yZXBsYWNlKC9cXHMrL2csICcnKTtcbn1cblxuZnVuY3Rpb24gY2FwaXRhbGl6ZUZpcnN0TGV0dGVyKHN0cmluZzogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIHN0cmluZy5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0cmluZy5zbGljZSgxKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE5hbWUoY29tcG9uZW50VGFnOiBzdHJpbmcpOiBzdHJpbmcge1xuICByZXR1cm4gY2FwaXRhbGl6ZUZpcnN0TGV0dGVyKFxuICAgIGNhbWVsaXplKGNvbXBvbmVudFRhZy5zbGljZSgzKS5yZXBsYWNlKCctJywgJyAnKSlcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUxpc3RlbmVyKGluc3RhbmNlOiBLb252YUNvbXBvbmVudCk6IExpc3RlbmVyUmVjb3JkIHtcbiAgY29uc3Qgb3V0cHV0OiBMaXN0ZW5lclJlY29yZCA9IHt9O1xuICBbXG4gICAgJ21vdXNlb3ZlcicsXG4gICAgJ21vdXNlbW92ZScsXG4gICAgJ21vdXNlb3V0JyxcbiAgICAnbW91c2VlbnRlcicsXG4gICAgJ21vdXNlbGVhdmUnLFxuICAgICdtb3VzZWRvd24nLFxuICAgICdtb3VzZXVwJyxcbiAgICAnd2hlZWwnLFxuICAgICdjb250ZXh0bWVudScsXG4gICAgJ2NsaWNrJyxcbiAgICAnZGJsY2xpY2snLFxuICAgICd0b3VjaHN0YXJ0JyxcbiAgICAndG91Y2htb3ZlJyxcbiAgICAndG91Y2hlbmQnLFxuICAgICd0YXAnLFxuICAgICdkYmx0YXAnLFxuICAgICdkcmFnc3RhcnQnLFxuICAgICdkcmFnbW92ZScsXG4gICAgJ2RyYWdlbmQnLFxuICBdLmZvckVhY2goKGV2ZW50TmFtZSkgPT4ge1xuICAgIGNvbnN0IG5hbWU6IGtleW9mIEtvbnZhQ29tcG9uZW50ID0gPGtleW9mIEtvbnZhQ29tcG9uZW50PmV2ZW50TmFtZTtcblxuICAgIGNvbnN0IGV2ZW50RW1pdHRlcjogRXZlbnRFbWl0dGVyPHVua25vd24+ID0gPEV2ZW50RW1pdHRlcjx1bmtub3duPj4oXG4gICAgICBpbnN0YW5jZVtuYW1lXVxuICAgICk7XG4gICAgaWYgKGV2ZW50RW1pdHRlci5vYnNlcnZlZCkge1xuICAgICAgb3V0cHV0WydvbicgKyBldmVudE5hbWVdID0gZXZlbnRFbWl0dGVyLmVtaXQuYmluZChldmVudEVtaXR0ZXIpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cbmV4cG9ydCB7IHVwZGF0ZVBpY3R1cmUsIGFwcGx5Tm9kZVByb3BzIH07XG4iXX0=