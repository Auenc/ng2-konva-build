// adapted FROM: https://github.com/lavrton/react-konva/blob/master/src/react-konva-fiber.js
import updatePicture from './updatePicture';
export default function applyNodeProps(component, props = {}, oldProps = {}) {
    if ('id' in props) {
        const message = `ng2-konva: You are using "id" attribute for Konva node. In some very rare cases it may produce bugs. Currently we recommend not to use it and use "name" attribute instead.`;
        console.warn(message);
    }
    const instance = component.getStage();
    const updatedProps = {};
    let hasUpdates = false;
    Object.keys(oldProps).forEach((key) => {
        const isEvent = key.slice(0, 2) === 'on';
        const propChanged = oldProps[key] !== props[key];
        if (isEvent && propChanged) {
            let eventName = key.slice(2).toLowerCase();
            if (eventName.slice(0, 7) === 'content') {
                eventName =
                    'content' + eventName.slice(7, 8).toUpperCase() + eventName.slice(8);
            }
            instance.off(eventName, oldProps[key]);
        }
        const toRemove = !Object.hasOwn(props, key);
        if (toRemove) {
            instance.setAttr(key, undefined);
        }
    });
    Object.keys(props).forEach((key) => {
        const isEvent = key.slice(0, 2) === 'on';
        const toAdd = oldProps[key] !== props[key];
        if (isEvent && toAdd) {
            let eventName = key.slice(2).toLowerCase();
            if (eventName.slice(0, 7) === 'content') {
                eventName =
                    'content' + eventName.slice(7, 8).toUpperCase() + eventName.slice(8);
            }
            if (props[key]) {
                instance.off(eventName);
                instance.on(eventName, (event) => {
                    props[key]({
                        angularComponent: component,
                        event,
                    });
                });
            }
        }
        if (!isEvent &&
            (props[key] !== oldProps[key] || props[key] !== instance.getAttr(key))) {
            hasUpdates = true;
            updatedProps[key] = props[key];
        }
    });
    if (hasUpdates) {
        instance.setAttrs(updatedProps);
        updatePicture(instance);
        let val;
        Object.keys(updatedProps).forEach((prop) => {
            val = updatedProps[prop];
            if (val instanceof Image && !val.complete) {
                const node = instance;
                val.addEventListener('load', function () {
                    const layer = node.getLayer();
                    if (layer) {
                        layer.batchDraw();
                    }
                });
            }
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwbHlOb2RlUHJvcHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZzIta29udmEvc3JjL2xpYi91dGlscy9hcHBseU5vZGVQcm9wcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw0RkFBNEY7QUFFNUYsT0FBTyxhQUFhLE1BQU0saUJBQWlCLENBQUM7QUFNNUMsTUFBTSxDQUFDLE9BQU8sVUFBVSxjQUFjLENBQ3BDLFNBQXlCLEVBQ3pCLFFBQW1CLEVBQUUsRUFDckIsV0FBc0IsRUFBRTtJQUV4QixJQUFJLElBQUksSUFBSSxLQUFLLEVBQUUsQ0FBQztRQUNsQixNQUFNLE9BQU8sR0FBRyw2S0FBNkssQ0FBQztRQUM5TCxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3hCLENBQUM7SUFFRCxNQUFNLFFBQVEsR0FBRyxTQUFTLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDdEMsTUFBTSxZQUFZLEdBQWMsRUFBRSxDQUFDO0lBQ25DLElBQUksVUFBVSxHQUFHLEtBQUssQ0FBQztJQUV2QixNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO1FBQ3BDLE1BQU0sT0FBTyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQztRQUN6QyxNQUFNLFdBQVcsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLEtBQUssS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2pELElBQUksT0FBTyxJQUFJLFdBQVcsRUFBRSxDQUFDO1lBQzNCLElBQUksU0FBUyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDM0MsSUFBSSxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxTQUFTLEVBQUUs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QUFNLEVBQUU7b0JBQzNCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztvQkFDOUIsSUFBSSxLQUFLLEVBQUUsQ0FBQzt3QkFDVixLQUFLLENBQUMsU0FBUyxFQUFFLENBQUM7b0JBQ3BCLENBQUM7Z0JBQ0gsQ0FBQyxDQUFDLENBQUM7WUFDTCxDQUFDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGFkYXB0ZWQgRlJPTTogaHR0cHM6Ly9naXRodWIuY29tL2xhdnJ0b24vcmVhY3Qta29udmEvYmxvYi9tYXN0ZXIvc3JjL3JlYWN0LWtvbnZhLWZpYmVyLmpzXG5cbmltcG9ydCB1cGRhdGVQaWN0dXJlIGZyb20gJy4vdXBkYXRlUGljdHVyZSc7XG5pbXBvcnQgeyBLb252YUNvbXBvbmVudCB9IGZyb20gJy4uL2ludGVyZmFjZXMva28tY29tcG9uZW50LmludGVyZmFjZSc7XG5pbXBvcnQgeyBLb252YUV2ZW50T2JqZWN0IH0gZnJvbSAna29udmEvbGliL05vZGUnO1xuaW1wb3J0IHsgTmdLb252YUV2ZW50T2JqZWN0IH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9uZ0tvbnZhRXZlbnRPYmplY3QnO1xuaW1wb3J0IHsgUHJvcHNUeXBlIH0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFwcGx5Tm9kZVByb3BzKFxuICBjb21wb25lbnQ6IEtvbnZhQ29tcG9uZW50LFxuICBwcm9wczogUHJvcHNUeXBlID0ge30sXG4gIG9sZFByb3BzOiBQcm9wc1R5cGUgPSB7fVxuKTogdm9pZCB7XG4gIGlmICgnaWQnIGluIHByb3BzKSB7XG4gICAgY29uc3QgbWVzc2FnZSA9IGBuZzIta29udmE6IFlvdSBhcmUgdXNpbmcgXCJpZFwiIGF0dHJpYnV0ZSBmb3IgS29udmEgbm9kZS4gSW4gc29tZSB2ZXJ5IHJhcmUgY2FzZXMgaXQgbWF5IHByb2R1Y2UgYnVncy4gQ3VycmVudGx5IHdlIHJlY29tbWVuZCBub3QgdG8gdXNlIGl0IGFuZCB1c2UgXCJuYW1lXCIgYXR0cmlidXRlIGluc3RlYWQuYDtcbiAgICBjb25zb2xlLndhcm4obWVzc2FnZSk7XG4gIH1cblxuICBjb25zdCBpbnN0YW5jZSA9IGNvbXBvbmVudC5nZXRTdGFnZSgpO1xuICBjb25zdCB1cGRhdGVkUHJvcHM6IFByb3BzVHlwZSA9IHt9O1xuICBsZXQgaGFzVXBkYXRlcyA9IGZhbHNlO1xuXG4gIE9iamVjdC5rZXlzKG9sZFByb3BzKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICBjb25zdCBpc0V2ZW50ID0ga2V5LnNsaWNlKDAsIDIpID09PSAnb24nO1xuICAgIGNvbnN0IHByb3BDaGFuZ2VkID0gb2xkUHJvcHNba2V5XSAhPT0gcHJvcHNba2V5XTtcbiAgICBpZiAoaXNFdmVudCAmJiBwcm9wQ2hhbmdlZCkge1xuICAgICAgbGV0IGV2ZW50TmFtZSA9IGtleS5zbGljZSgyKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgaWYgKGV2ZW50TmFtZS5zbGljZSgwLCA3KSA9PT0gJ2NvbnRlbnQnKSB7XG4gICAgICAgIGV2ZW50TmFtZSA9XG4gICAgICAgICAgJ2NvbnRlbnQnICsgZXZlbnROYW1lLnNsaWNlKDcsIDgpLnRvVXBwZXJDYXNlKCkgKyBldmVudE5hbWUuc2xpY2UoOCk7XG4gICAgICB9XG4gICAgICBpbnN0YW5jZS5vZmYoZXZlbnROYW1lLCBvbGRQcm9wc1trZXldKTtcbiAgICB9XG4gICAgY29uc3QgdG9SZW1vdmUgPSAhT2JqZWN0Lmhhc093bihwcm9wcywga2V5KTtcbiAgICBpZiAodG9SZW1vdmUpIHtcbiAgICAgIGluc3RhbmNlLnNldEF0dHIoa2V5LCB1bmRlZmluZWQpO1xuICAgIH1cbiAgfSk7XG4gIE9iamVjdC5rZXlzKHByb3BzKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICBjb25zdCBpc0V2ZW50ID0ga2V5LnNsaWNlKDAsIDIpID09PSAnb24nO1xuICAgIGNvbnN0IHRvQWRkID0gb2xkUHJvcHNba2V5XSAhPT0gcHJvcHNba2V5XTtcbiAgICBpZiAoaXNFdmVudCAmJiB0b0FkZCkge1xuICAgICAgbGV0IGV2ZW50TmFtZSA9IGtleS5zbGljZSgyKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgaWYgKGV2ZW50TmFtZS5zbGljZSgwLCA3KSA9PT0gJ2NvbnRlbnQnKSB7XG4gICAgICAgIGV2ZW50TmFtZSA9XG4gICAgICAgICAgJ2NvbnRlbnQnICsgZXZlbnROYW1lLnNsaWNlKDcsIDgpLnRvVXBwZXJDYXNlKCkgKyBldmVudE5hbWUuc2xpY2UoOCk7XG4gICAgICB9XG4gICAgICBpZiAocHJvcHNba2V5XSkge1xuICAgICAgICBpbnN0YW5jZS5vZmYoZXZlbnROYW1lKTtcbiAgICAgICAgaW5zdGFuY2Uub24oZXZlbnROYW1lLCAoZXZlbnQ6IEtvbnZhRXZlbnRPYmplY3Q8dW5rbm93bj4pID0+IHtcbiAgICAgICAgICBwcm9wc1trZXldKHtcbiAgICAgICAgICAgIGFuZ3VsYXJDb21wb25lbnQ6IGNvbXBvbmVudCxcbiAgICAgICAgICAgIGV2ZW50LFxuICAgICAgICAgIH0gYXMgTmdLb252YUV2ZW50T2JqZWN0PHVua25vd24+KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChcbiAgICAgICFpc0V2ZW50ICYmXG4gICAgICAocHJvcHNba2V5XSAhPT0gb2xkUHJvcHNba2V5XSB8fCBwcm9wc1trZXldICE9PSBpbnN0YW5jZS5nZXRBdHRyKGtleSkpXG4gICAgKSB7XG4gICAgICBoYXNVcGRhdGVzID0gdHJ1ZTtcbiAgICAgIHVwZGF0ZWRQcm9wc1trZXldID0gcHJvcHNba2V5XTtcbiAgICB9XG4gIH0pO1xuXG4gIGlmIChoYXNVcGRhdGVzKSB7XG4gICAgaW5zdGFuY2Uuc2V0QXR0cnModXBkYXRlZFByb3BzKTtcbiAgICB1cGRhdGVQaWN0dXJlKGluc3RhbmNlKTtcbiAgICBsZXQgdmFsO1xuICAgIE9iamVjdC5rZXlzKHVwZGF0ZWRQcm9wcykuZm9yRWFjaCgocHJvcCkgPT4ge1xuICAgICAgdmFsID0gdXBkYXRlZFByb3BzW3Byb3BdO1xuICAgICAgaWYgKHZhbCBpbnN0YW5jZW9mIEltYWdlICYmICF2YWwuY29tcGxldGUpIHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IGluc3RhbmNlO1xuICAgICAgICB2YWwuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBjb25zdCBsYXllciA9IG5vZGUuZ2V0TGF5ZXIoKTtcbiAgICAgICAgICBpZiAobGF5ZXIpIHtcbiAgICAgICAgICAgIGxheWVyLmJhdGNoRHJhdygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==